[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 0,
  "modified": "2025-09-08 20:15:13.139766",
  "module": null,
  "name": "Item Code Generation",
  "script": "frappe.ui.form.on('Item', {\r\n\t// remember previous group to detect changes\r\n\tonload: function(frm) {\r\n\t\tfrm._previous_item_group = frm.doc.item_group || null;\r\n\t},\r\n\r\n\titem_group: function(frm) {\r\n\t\t// if no group selected => clear reserved code and make editable\r\n\t\tif (!frm.doc.item_group) {\r\n\t\t\t// If the current item_code appears to have been reserved (we set it readonly),\r\n\t\t\t// clear it so user can enter a manual code\r\n\t\t\tfrm.set_value('item_code', '');\r\n\t\t\tfrm.set_df_property('item_code', 'read_only', 0);\r\n\t\t\tfrm.refresh_field('item_code');\r\n\t\t\tfrm._previous_item_group = null;\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// If group changed from previous value, decide if item_name should be updated\r\n\t\tconst prev_group = frm._previous_item_group;\r\n\t\tconst group_changed = prev_group && prev_group !== frm.doc.item_group;\r\n\r\n\t\t// Determine whether item_name is auto-generated (best-effort):\r\n\t\t// - If empty OR starts with previous group name OR matches pattern \"GROUP - CODE\"\r\n\t\tlet should_update_name = false;\r\n\t\tconst current_name = frm.doc.item_name || '';\r\n\t\tif (!current_name) {\r\n\t\t\tshould_update_name = true;\r\n\t\t} else if (group_changed) {\r\n\t\t\t// common auto pattern: \"<prev_group> - <something>\"\r\n\t\t\tif (prev_group && (current_name.startsWith(prev_group + ' ') || current_name.startsWith(prev_group + '-'))) {\r\n\t\t\t\tshould_update_name = true;\r\n\t\t\t}\r\n\t\t\t// or pattern \"SOMEGROUP - CODE\"\r\n\t\t\tif (/^[\\w\\s]+ - \\w+/.test(current_name)) {\r\n\t\t\t\t// weak heuristic â€” still mark as auto\r\n\t\t\t\tshould_update_name = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clear old reserved code if group changed (so we don't keep wrong group code)\r\n\t\tif (group_changed) {\r\n\t\t\t// only clear if it was readonly (i.e., likely reserved)\r\n\t\t\tconst was_readonly = frm.get_field('item_code') && frm.get_field('item_code').df.read_only;\r\n\t\t\tif (was_readonly) {\r\n\t\t\t\tfrm.set_value('item_code', '');\r\n\t\t\t\tfrm.refresh_field('item_code');\r\n\t\t\t\tfrm.set_df_property('item_code', 'read_only', 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Reserve a new item code from server\r\n\t\tfrappe.call({\r\n\t\t\tmethod: \"devp_custom.api.reserve_item_code\",\r\n\t\t\targs: {\r\n\t\t\t\titem_group: frm.doc.item_group,\r\n\t\t\t\tdigits: 3\r\n\t\t\t},\r\n\t\t\tfreeze: true,\r\n\t\t\tfreeze_message: __(\"Reserving item code...\"),\r\n\t\t\tcallback: function(r) {\r\n\t\t\t\tif (r.message) {\r\n\t\t\t\t\t// set the new reserved code and lock it\r\n\t\t\t\t\tfrm.set_value('item_code', r.message);\r\n\t\t\t\t\tfrm.set_df_property('item_code', 'read_only', 1);\r\n\t\t\t\t\tfrm.refresh_field('item_code');\r\n\r\n\t\t\t\t\t// optionally update item_name if the heuristic decided to auto-update\r\n\t\t\t\t\tif (should_update_name) {\r\n\t\t\t\t\t\t// simple auto-name: \"ItemGroup - CODE\"\r\n\t\t\t\t\t\tconst new_name = frm.doc.item_group + \" - \" + r.message;\r\n\t\t\t\t\t\tfrm.set_value('item_name', new_name);\r\n\t\t\t\t\t\tfrm.refresh_field('item_name');\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfrappe.msgprint(__('Could not reserve item code. Try again.'));\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\terror: function() {\r\n\t\t\t\tfrappe.msgprint(__('Could not reserve item code. Try again.'));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// store current group for future change detection\r\n\t\tfrm._previous_item_group = frm.doc.item_group;\r\n\t},\r\n\r\n\t// Safety: if item_code is still empty at validate, try reserving again\r\n\tvalidate: function(frm) {\r\n\t\tif (!frm.doc.item_code && frm.doc.item_group) {\r\n\t\t\tfrappe.dom.freeze(__('Reserving item code...'));\r\n\t\t\tfrappe.call({\r\n\t\t\t\tmethod: \"devp_custom.api.reserve_item_code\",\r\n\t\t\t\targs: {\r\n\t\t\t\t\titem_group: frm.doc.item_group,\r\n\t\t\t\t\tdigits: 3\r\n\t\t\t\t},\r\n\t\t\t\tcallback: function(r) {\r\n\t\t\t\t\tfrappe.dom.unfreeze();\r\n\t\t\t\t\tif (r.message) {\r\n\t\t\t\t\t\tfrm.set_value('item_code', r.message);\r\n\t\t\t\t\t\tfrm.set_df_property('item_code', 'read_only', 1);\r\n\t\t\t\t\t\tfrm.refresh_field('item_code');\r\n\r\n\t\t\t\t\t\t// if item_name empty, set it too\r\n\t\t\t\t\t\tif (!frm.doc.item_name) {\r\n\t\t\t\t\t\t\tfrm.set_value('item_name', frm.doc.item_group + \" - \" + r.message);\r\n\t\t\t\t\t\t\tfrm.refresh_field('item_name');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tfrappe.msgprint(__('Could not reserve item code. Try again.'));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-09-19 10:26:30.427589",
  "module": null,
  "name": "Price Calculation",
  "script": "// Client Script (Sales Invoice) - qty / rate / amount sync with manual_amount fallback\r\nfrappe.ui.form.on('Sales Invoice Item', {\r\n    // On load of the parent form, ensure amount field is editable if manual_amount is absent\r\n    form_render: function(frm) {\r\n        // if manual_amount not present on child doctype, make built-in amount editable on client\r\n        const df = frappe.meta.get_docfield('Sales Invoice Item', 'manual_amount', frm.doc.name);\r\n        if (!df) {\r\n            // Make amount editable in client only (affects current user's UI)\r\n            try {\r\n                frappe.model.set_df_property('Sales Invoice Item', 'amount', 'read_only', 0);\r\n            } catch (e) {\r\n                console.warn('Could not toggle amount read_only property:', e);\r\n            }\r\n        }\r\n    },\r\n\r\n    qty: function(frm, cdt, cdn) {\r\n        update_row_values(frm, cdt, cdn, 'qty');\r\n    },\r\n    rate: function(frm, cdt, cdn) {\r\n        update_row_values(frm, cdt, cdn, 'rate');\r\n    },\r\n    amount: function(frm, cdt, cdn) {\r\n        update_row_values(frm, cdt, cdn, 'amount');\r\n    },\r\n    manual_amount: function(frm, cdt, cdn) {\r\n        // if manual_amount exists and user edits it directly\r\n        update_row_values(frm, cdt, cdn, 'manual_amount');\r\n    },\r\n\r\n    // On save/cancel ensure amount finalization: copy manual_amount -> amount if present\r\n    before_save: function(frm) {\r\n        (frm.doc.items || []).forEach(function(row) {\r\n            if (row.manual_amount !== undefined && row.manual_amount !== null) {\r\n                // copy manual_amount into amount so server side gets the updated value\r\n                frappe.model.set_value(row.doctype, row.name, 'amount', row.manual_amount);\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfunction update_row_values(frm, cdt, cdn, changed_field) {\r\n    const row = locals[cdt][cdn];\r\n    if (!row) return;\r\n\r\n    if (row._updating) return;\r\n    row._updating = true;\r\n\r\n    try {\r\n        // Determine which \"amount\" field to use: manual_amount (if present) else amount\r\n        const uses_manual = (row.manual_amount !== undefined);\r\n        const amount_field = uses_manual ? 'manual_amount' : 'amount';\r\n\r\n        const qty = parseFloat(row.qty) || 0;\r\n        const rate = parseFloat(row.rate) || 0;\r\n        const amount = parseFloat(row[amount_field]) || 0;\r\n\r\n        // currency precision - fallback to 2\r\n        let precision = 2;\r\n        try {\r\n            // try reading currency precision if available in defaults (may not always work)\r\n            const p = frappe.defaults.get_default(\"currency_precision\");\r\n            if (p) precision = parseInt(p);\r\n        } catch (e) { /* ignore */ }\r\n\r\n        const round = (v) => {\r\n            const p = Math.pow(10, precision);\r\n            return Math.round((v + 0.0000000001) * p) / p;\r\n        };\r\n\r\n        // Logic: keep qty & rate & amount in sync based on what changed\r\n        if (changed_field === 'qty') {\r\n            if (qty && (row.rate !== undefined && row.rate !== null && row.rate !== '')) {\r\n                const newAmount = round(qty * rate);\r\n                if (newAmount !== amount) {\r\n                    frappe.model.set_value(cdt, cdn, amount_field, newAmount);\r\n                }\r\n            } else if (qty && (row[amount_field] !== undefined && row[amount_field] !== null && row[amount_field] !== '')) {\r\n                const newRate = qty > 0 ? round(row[amount_field] / qty) : 0;\r\n                if (newRate !== rate) {\r\n                    frappe.model.set_value(cdt, cdn, 'rate', newRate);\r\n                }\r\n            }\r\n        } else if (changed_field === 'rate') {\r\n            if (qty) {\r\n                const newAmount = round(qty * rate);\r\n                if (newAmount !== amount) {\r\n                    frappe.model.set_value(cdt, cdn, amount_field, newAmount);\r\n                }\r\n            }\r\n        } else if (changed_field === 'amount' || changed_field === 'manual_amount') {\r\n            // amount changed -> recalc rate if qty present\r\n            const newAmountVal = parseFloat(row[amount_field]) || 0;\r\n            if (qty > 0) {\r\n                const newRate = round(newAmountVal / qty);\r\n                if (newRate !== rate) {\r\n                    frappe.model.set_value(cdt, cdn, 'rate', newRate);\r\n                }\r\n            }\r\n        }\r\n\r\n        // trigger parent calculation (if present)\r\n        try {\r\n            frm.trigger('calculate_taxes_and_totals');\r\n        } catch (e) {\r\n            // ignore if parent has different calculation method\r\n        }\r\n\r\n    } finally {\r\n        // small delay to ensure set_value propagation finishes, then clear flag and refresh\r\n        setTimeout(() => {\r\n            if (locals[cdt] && locals[cdt][cdn]) {\r\n                locals[cdt][cdn]._updating = false;\r\n            }\r\n            // refresh only the child table to update values visually\r\n            frm.refresh_field('items');\r\n        }, 30);\r\n    }\r\n}\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 0,
  "modified": "2025-09-17 17:02:33.940060",
  "module": null,
  "name": "Last Five Sales Invoice",
  "script": "frappe.ui.form.on('Sales Invoice Item', {\r\n    item_code: function(frm, cdt, cdn) {\r\n        const item = locals[cdt][cdn];\r\n        if (!item || !item.item_code) return;\r\n\r\n        // optional: require customer on parent Sales Invoice\r\n        const customer = frm.doc.customer || null;\r\n\r\n        // call server method\r\n        frappe.call({\r\n            method: 'devp_custom.api.get_last_item_prices', // path in your app\r\n            args: {\r\n                item_code: item.item_code,\r\n                customer: customer,\r\n                limit: 5\r\n            },\r\n            freeze: true,\r\n            freeze_message: 'Fetching last selling prices...',\r\n            callback: function(r) {\r\n                const data = (r && r.message) ? r.message : [];\r\n                if (!data.length) {\r\n                    frappe.msgprint({ title: 'No history', message: `No sales history found for ${item.item_code}`, indicator: 'orange' });\r\n                    return;\r\n                }\r\n                show_price_dialog(frm, item, data);\r\n            },\r\n            error: function(err) {\r\n                console.error('Error fetching last prices', err);\r\n                frappe.msgprint({ title: 'Error', message: 'Failed to fetch last prices. See console.' });\r\n            }\r\n        });\r\n    }\r\n});\r\n\r\nfunction show_price_dialog(frm, item, data) {\r\n    // data expected: [{ invoice: 'SINV-...', posting_date: 'YYYY-MM-DD', rate: 123.45 }, ...]\r\n    const fields = [{\r\n        fieldname: 'prices',\r\n        fieldtype: 'Table',\r\n        cannot_add_rows: true,\r\n        cannot_delete_rows: true,\r\n        in_place_edit: false,\r\n        fields: [\r\n            {\r\n                label: 'Sales Invoice',\r\n                fieldname: 'invoice',\r\n                fieldtype: 'Link',\r\n                options: 'Sales Invoice',\r\n                in_list_view: 1,\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'Date',\r\n                fieldname: 'posting_date',\r\n                fieldtype: 'Date',\r\n                in_list_view: 1,\r\n                read_only: 1\r\n            },\r\n            {\r\n                label: 'Rate',\r\n                fieldname: 'rate',\r\n                fieldtype: 'Currency',\r\n                in_list_view: 1,\r\n                read_only: 1\r\n            }\r\n        ],\r\n        data: data\r\n    }];\r\n\r\n    const dialog = new frappe.ui.Dialog({\r\n        title: `${item.item_code} â€” Last Selling Prices`,\r\n        size: 'large',\r\n        fields: fields,\r\n        primary_action_label: 'Select',\r\n        primary_action: function() {\r\n            try {\r\n                const selected = dialog.fields_dict.prices.grid.get_selected_children();\r\n                if (!selected || !selected.length) {\r\n                    frappe.msgprint('Please select one row to pick the rate.');\r\n                    return;\r\n                }\r\n                if (selected.length > 1) {\r\n                    frappe.msgprint('Please select only one row.');\r\n                    return;\r\n                }\r\n                const chosen = selected[0];\r\n\r\n                // set the rate on the Sales Invoice Item row\r\n                frappe.model.set_value(item.doctype, item.name, 'rate', chosen.rate);\r\n                dialog.hide();\r\n            } catch (e) {\r\n                console.error('Dialog select error', e);\r\n                frappe.msgprint('Could not set rate â€” see console.');\r\n            }\r\n        }\r\n    });\r\n\r\n    dialog.show();\r\n\r\n    // auto-select first row for convenience\r\n    try {\r\n        const grid = dialog.fields_dict.prices.grid;\r\n        if (grid && grid.grid_rows && grid.grid_rows.length) {\r\n            const firstRow = grid.grid_rows[0];\r\n            if (firstRow && firstRow.row_select_checkbox) {\r\n                firstRow.row_select_checkbox.click();\r\n                grid.wrapper && grid.wrapper.scrollTop(0);\r\n            }\r\n        }\r\n    } catch (e) {\r\n        console.warn('Auto-select failed', e);\r\n    }\r\n}\r\n",
  "view": "Form"
 }
]